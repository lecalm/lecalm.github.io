<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Loving Rose</title>
  
  <subtitle>一枚程序猿的修炼屋</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/lecalm/"/>
  <updated>2020-06-06T02:51:05.744Z</updated>
  <id>https://github.com/lecalm/</id>
  
  <author>
    <name>Jack Hou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java ArrayList踩坑笔记</title>
    <link href="https://github.com/lecalm/2020/06/06/java-ArrayList%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/"/>
    <id>https://github.com/lecalm/2020/06/06/java-ArrayList%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/</id>
    <published>2020-06-06T02:43:15.000Z</published>
    <updated>2020-06-06T02:51:05.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="List与数组的相互转化"><a href="#List与数组的相互转化" class="headerlink" title="List与数组的相互转化"></a>List与数组的相互转化</h1><ul><li><pre><code>ArrayList&lt;Integer&gt; a=new ArrayList&lt;Integer&gt;();int[] array=(int[])a.toArray(new int[size]);//会报错   则会报错，这是因为int[]并不等同于Integer[]。因此如果换成Integer[]数组，则能正确运行。  List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();  list.add(1);  list.add(2);  Integer[] array = list.toArray(new Integer[list.size()]);//能正确运行</code></pre></li></ul><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;List与数组的相互转化&quot;&gt;&lt;a href=&quot;#List与数组的相互转化&quot; class=&quot;headerlink&quot; title=&quot;List与数组的相互转化&quot;&gt;&lt;/a&gt;List与数组的相互转化&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;ArrayList&amp;lt;
      
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/lecalm/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java类" scheme="https://github.com/lecalm/tags/Java%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java bitCount源码解析</title>
    <link href="https://github.com/lecalm/2020/05/22/Java-bitCount%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/lecalm/2020/05/22/Java-bitCount%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2020-05-22T03:27:40.000Z</published>
    <updated>2020-05-22T03:51:21.390Z</updated>
    
    <content type="html"><![CDATA[<p>bitCount源码：  </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> static <span class="built_in">int</span> bitCount(<span class="built_in">int</span> i) &#123;</span><br><span class="line">        <span class="comment">// HD, Figure 5-2</span></span><br><span class="line">        i = i - ((i &gt;&gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">        i = (i &amp; <span class="number">0x33333333</span>) + ((i &gt;&gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">        i = (i + (i &gt;&gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0f0f0f0f</span>;</span><br><span class="line">        i = i + (i &gt;&gt;&gt; <span class="number">8</span>);</span><br><span class="line">        i = i + (i &gt;&gt;&gt; <span class="number">16</span>);  </span><br><span class="line">        <span class="keyword">return</span> i &amp; <span class="number">0x3f</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>函数功能说明：技术整型i二进制表示中1的个数。<br>具体源码解析过程:<a href="https://blog.csdn.net/zhouzipeng000/article/details/56676885" target="_blank" rel="noopener"><font red="yellow">源码解析</font></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;bitCount源码：  &lt;/p&gt;
&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/lecalm/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java源码" scheme="https://github.com/lecalm/tags/Java%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Servlet配置</title>
    <link href="https://github.com/lecalm/2020/05/21/Servlet%E9%85%8D%E7%BD%AE/"/>
    <id>https://github.com/lecalm/2020/05/21/Servlet%E9%85%8D%E7%BD%AE/</id>
    <published>2020-05-21T12:34:12.000Z</published>
    <updated>2020-05-22T06:02:23.380Z</updated>
    
    <content type="html"><![CDATA[<p>在web.xml配置  </p><pre><code>&lt;!--配置Servlet--&gt;    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;         version=&quot;3.1&quot;&gt;    &lt;!--配置Servlet--&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;        &lt;servlet-class&gt;com.le.web.ser.MyServerlet&lt;/servlet-class&gt;        &lt;!--            指定Servlet的创建时机，（默认情况，第一次被访问时，Servlet被创建）                1、第一次被访问时创建                    *&lt;load-on-startup&gt;&lt;/load-on-startup&gt;的值为负值                2、在服务器启动时创建                    *&lt;load-on-startup&gt;&lt;/load-on-startup&gt;的值为0或者正数        --&gt;        &lt;load-on-startup&gt;&lt;/load-on-startup&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;        &lt;url-pattern&gt;/demo1&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;</code></pre><a id="more"></a><h2 id="执行原理："><a href="#执行原理：" class="headerlink" title="执行原理："></a>执行原理：</h2><h3 id="1、当服务器受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径"><a href="#1、当服务器受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径" class="headerlink" title="1、当服务器受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径"></a>1、当服务器受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</h3><h3 id="2、查找web-xml文件，是否有对应的的标签体内容"><a href="#2、查找web-xml文件，是否有对应的的标签体内容" class="headerlink" title="2、查找web.xml文件，是否有对应的的标签体内容"></a>2、查找web.xml文件，是否有对应的<url-pattern>的标签体内容</url-pattern></h3><h3 id="3、如果有，则在找到对应的全类名"><a href="#3、如果有，则在找到对应的全类名" class="headerlink" title="3、如果有，则在找到对应的全类名"></a>3、如果有，则在找到对应的<servlet-class>全类名</servlet-class></h3><h3 id="4、tomact会将字节码文件加载进内存，并且创建其对象"><a href="#4、tomact会将字节码文件加载进内存，并且创建其对象" class="headerlink" title="4、tomact会将字节码文件加载进内存，并且创建其对象"></a>4、tomact会将字节码文件加载进内存，并且创建其对象</h3><h3 id="5、调用其方法"><a href="#5、调用其方法" class="headerlink" title="5、调用其方法"></a>5、调用其方法</h3><h2 id="Servlet的生命周期方法："><a href="#Servlet的生命周期方法：" class="headerlink" title="Servlet的生命周期方法："></a>Servlet的生命周期方法：</h2><h3 id="1、被创建时，执行init方法，只执行一次"><a href="#1、被创建时，执行init方法，只执行一次" class="headerlink" title="1、被创建时，执行init方法，只执行一次"></a>1、被创建时，执行init方法，只执行一次</h3><pre><code>*Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet**是单例的**。    *多个用户同时访问时，可能存在线程安全问题。    *解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要修改其值。</code></pre><h3 id="2、提供服务，执行service方法，执行多次"><a href="#2、提供服务，执行service方法，执行多次" class="headerlink" title="2、提供服务，执行service方法，执行多次"></a>2、提供服务，执行service方法，执行多次</h3><pre><code>*每次访问Servlet时，Service方法都会被调用一次</code></pre><h3 id="3、被销毁，执行destroy方法，只执行一次"><a href="#3、被销毁，执行destroy方法，只执行一次" class="headerlink" title="3、被销毁，执行destroy方法，只执行一次"></a>3、被销毁，执行destroy方法，只执行一次</h3><pre><code>*Servlet被销毁时执行。服务器关闭时，Servlet被销毁。*只有服务器正常关闭时，才会执行destroy方法。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在web.xml配置  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!--配置Servlet--&amp;gt;
    &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;web-app xmlns=&amp;quot;http://xmlns.jcp.org/xml/ns/javaee&amp;quot;
         xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
         xsi:schemaLocation=&amp;quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&amp;quot;
         version=&amp;quot;3.1&amp;quot;&amp;gt;
    &amp;lt;!--配置Servlet--&amp;gt;
    &amp;lt;servlet&amp;gt;
        &amp;lt;servlet-name&amp;gt;demo1&amp;lt;/servlet-name&amp;gt;
        &amp;lt;servlet-class&amp;gt;com.le.web.ser.MyServerlet&amp;lt;/servlet-class&amp;gt;
        &amp;lt;!--
            指定Servlet的创建时机，（默认情况，第一次被访问时，Servlet被创建）
                1、第一次被访问时创建
                    *&amp;lt;load-on-startup&amp;gt;&amp;lt;/load-on-startup&amp;gt;的值为负值
                2、在服务器启动时创建
                    *&amp;lt;load-on-startup&amp;gt;&amp;lt;/load-on-startup&amp;gt;的值为0或者正数
        --&amp;gt;
        &amp;lt;load-on-startup&amp;gt;&amp;lt;/load-on-startup&amp;gt;
    &amp;lt;/servlet&amp;gt;
    &amp;lt;servlet-mapping&amp;gt;
        &amp;lt;servlet-name&amp;gt;demo1&amp;lt;/servlet-name&amp;gt;
        &amp;lt;url-pattern&amp;gt;/demo1&amp;lt;/url-pattern&amp;gt;
    &amp;lt;/servlet-mapping&amp;gt;
&amp;lt;/web-app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/lecalm/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Servlet" scheme="https://github.com/lecalm/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>MySQL操作</title>
    <link href="https://github.com/lecalm/2020/05/14/mysql%E6%93%8D%E4%BD%9C/"/>
    <id>https://github.com/lecalm/2020/05/14/mysql%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-14T12:19:50.000Z</published>
    <updated>2020-05-14T12:45:26.408Z</updated>
    
    <content type="html"><![CDATA[<p><strong>MySql 从8.0开始修改密码有了变化，在user表加了字段authentication_string，修改密码前先检查authentication_string是否为空.</strong> </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;  </span><br><span class="line">update<span class="built_in"> user </span><span class="builtin-name">set</span> <span class="attribute">authentication_string</span>=<span class="string">''</span> where <span class="attribute">user</span>=<span class="string">'root'</span>;#--将字段置为空  </span><br><span class="line">ALTER<span class="built_in"> user </span><span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'root'</span>;--修改密码为root</span><br></pre></td></tr></table></figure><p><strong>mysql5.7开启远程访问权限</strong>  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;  </span><br><span class="line">update<span class="built_in"> user </span><span class="builtin-name">set</span> host = <span class="string">'%'</span> where<span class="built_in"> user </span>= <span class="string">'root'</span>; #(使mysql root用户可以连接上任意的ip地址) </span><br><span class="line">FLUSH PRIVILEGES</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;MySql 从8.0开始修改密码有了变化，在user表加了字段authentication_string，修改密码前先检查authentication_string是否为空.&lt;/strong&gt; &lt;/p&gt;
&lt;figure class=&quot;highlight ro
      
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/lecalm/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysql" scheme="https://github.com/lecalm/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客搭建初探</title>
    <link href="https://github.com/lecalm/2020/04/06/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%9D%E6%8E%A2/"/>
    <id>https://github.com/lecalm/2020/04/06/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%9D%E6%8E%A2/</id>
    <published>2020-04-06T09:09:19.000Z</published>
    <updated>2020-05-14T13:00:46.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HEXO从零开始"><a href="#HEXO从零开始" class="headerlink" title="HEXO从零开始"></a>HEXO从零开始</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>1、<a href="www.nodejs.org">安装Node.js</a><br>2、cnpm国外安装源较慢，因此改变安装源<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org&#39;</code></p><h2 id="安装hexo-cli博客框架"><a href="#安装hexo-cli博客框架" class="headerlink" title="安装hexo-cli博客框架"></a>安装hexo-cli博客框架</h2><p>1、在命令行模式输入<code>cnpm intall -g hexo-cli</code><br>2、在命令行模式输入<code>hexo -v</code>验证安装是否成功</p><a id="more"></a><h2 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h2><p>1、例如，笔者博客工作在E盘，因此在E盘，使用命令行<code>mkdir blog</code>，<br>2、进入到<strong>blog</strong> <code>cd blog</code>,</p><h2 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h2><p>1、在<strong>blog</strong>路径下输入<code>hexo init</code>初始化博客，<br>2、接下来输入如下命令：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s <span class="comment">//启动博客</span></span><br><span class="line">hexo n <span class="string">"我的第一篇博客文章"</span> <span class="comment">//创建文章</span></span><br></pre></td></tr></table></figure><p>3、生成第一篇博客后，可在<em>/blog/source/_posts</em>路径下查看文件，<br>4、接下来使用命令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">clean //清理目录</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">g </span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">s //重新启动博客</span></span><br></pre></td></tr></table></figure><h2 id="将博客部署到远端-本文以部署到github为例"><a href="#将博客部署到远端-本文以部署到github为例" class="headerlink" title="将博客部署到远端(本文以部署到github为例)"></a>将博客部署到远端(本文以部署到github为例)</h2><p>1、在github上<em>new repository</em>,其中Respository name必须为“lecalm.github.io”格式,即<em>/“用户名.github.io”</em>的格式。</p><img src="/2020/04/06/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%9D%E6%8E%A2/github.jpg" class title="This is an example image"><p>2、在<em>blog</em>目录下安装<em>git</em>插件<br><code>cnpm install --save hexo-deployer-git</code><br>3、设置blog目录下的_config.yml文件</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/lecalm/lecalm.github.io.git</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure><p>4、部署到远端<br><code>hexo d</code></p><h1 id="这样，hexo部署博客就部署成功啦！！！"><a href="#这样，hexo部署博客就部署成功啦！！！" class="headerlink" title="这样，hexo部署博客就部署成功啦！！！"></a><strong>这样，hexo部署博客就部署成功啦！！！</strong></h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HEXO从零开始&quot;&gt;&lt;a href=&quot;#HEXO从零开始&quot; class=&quot;headerlink&quot; title=&quot;HEXO从零开始&quot;&gt;&lt;/a&gt;HEXO从零开始&lt;/h1&gt;&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;p&gt;1、&lt;a href=&quot;www.nodejs.org&quot;&gt;安装Node.js&lt;/a&gt;&lt;br&gt;2、cnpm国外安装源较慢，因此改变安装源&lt;br&gt;&lt;code&gt;npm install -g cnpm --registry=https://registry.npm.taobao.org&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装hexo-cli博客框架&quot;&gt;&lt;a href=&quot;#安装hexo-cli博客框架&quot; class=&quot;headerlink&quot; title=&quot;安装hexo-cli博客框架&quot;&gt;&lt;/a&gt;安装hexo-cli博客框架&lt;/h2&gt;&lt;p&gt;1、在命令行模式输入&lt;code&gt;cnpm intall -g hexo-cli&lt;/code&gt;&lt;br&gt;2、在命令行模式输入&lt;code&gt;hexo -v&lt;/code&gt;验证安装是否成功&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://github.com/lecalm/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo搭建" scheme="https://github.com/lecalm/tags/hexo%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
